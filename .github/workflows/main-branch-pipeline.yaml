name: Main branch workflow

on:
  push:
    branches:
      - main

env:
  REPO_NAME: wini-gasthaus-website
  REPO_OWNER: Dominik-Hillmann
  ENV_NAME: prod

jobs:
  calculate-version:
    name: Calculate version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Calculate version
        env:
          COMMIT_SHA: ${{ github.sha }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Commit SHA: $COMMIT_SHA"
          reply=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/commits/$COMMIT_SHA/pulls")
          echo "Reply: $reply"          

          pr_number=$(echo "$reply" | jq -r '.[0].number')
          major_minor=$(cat VERSION)
          version="$major_minor.$pr_number"
          echo "Calculated version: $version"
          echo "$version" > FULL_VERSION

      - name: Upload variable as artifact
        uses: actions/upload-artifact@v3
        with:
          name: FULL_VERSION
          path: FULL_VERSION

  promote-image:
    name: Promote staging image to production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Download FULL_VERSION file
        uses: actions/download-artifact@v3
        with:
          name: FULL_VERSION
          path: .

      - name: Read FULL_VERSION file
        run: echo "VERSION=$(cat FULL_VERSION)" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PUSH_TOKEN }}

      - name: Pull staging image
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: docker pull "$DOCKERHUB_USERNAME/$REPO_NAME:$VERSION-stage"

      - name: Tag image for production
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          docker tag \
            "$DOCKERHUB_USERNAME/$REPO_NAME:$VERSION-stage" \
            "$DOCKERHUB_USERNAME/$REPO_NAME:$VERSION"

      - name: Push production image to Docker Hub
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: docker push "$DOCKERHUB_USERNAME/$REPO_NAME:$VERSION"

      - name: Delete staging image from Docker Hub
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKERHUB_DELETE_TOKEN }}
        run: |
          image_name="$DOCKER_HUB_USERNAME/$REPO_NAME"
          staging_tag="$VERSION-stage"
          
          hub_token=$(curl -s -H "Content-Type: application/json" -X POST -d "{\"username\": \"$DOCKER_HUB_USERNAME\", \"password\": \"$DOCKER_HUB_ACCESS_TOKEN\"}" https://hub.docker.com/v2/users/login/ | jq -r .token)
          
          curl -i -X DELETE \
            -H "Accept: application/json" \
            -H "Authorization: JWT $hub_token" \
            https://hub.docker.com/v2/repositories/$image_name/tags/$staging_tag/

  main-branch-deployment:
    name: Deploy to production
    runs-on: ubuntu-latest
    needs: promote-image
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Deploy to cluster
        uses: wahyd4/kubectl-helm-action@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG_B64 }}
        with:
          args: |
            full_version=$(cat FULL_VERSION)
            helm upgrade \
              --values chart/values.yaml \
              --values chart/values-$ENV_NAME.yaml \
              --install "$REPO_NAME" chart/ \
              --install \
              --namespace wini-$ENV_NAME \
              --set image.tag="$full_version" \
              --set appVersion="$full_version"

  create-version-tag:
    name: Set a tag with new version
    runs-on: ubuntu-latest
    needs: main-branch-deployment
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Download FULL_VERSION file
        uses: actions/download-artifact@v3
        with:
          name: FULL_VERSION
          path: .

      - name: Create version tag
        env:
          GIT_MAIL_ADDRESS: "${{ secrets.GIT_MAIL_ADDRESS }}"
        run: |
          version="v$(cat FULL_VERSION)"
          git config --local user.email "$GIT_MAIL_ADDRESS"
          git config --local user.name "$REPO_OWNER"
          git tag "$version"
          git push --tags
